name: Build Windows EXE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  build:
    name: Build on Windows
    runs-on: windows-latest

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\pip\Cache
            ~\AppData\Local\pypoetry
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'setup.py', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            frontend\node_modules
            ~\AppData\Local\npm-cache
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('frontend/package-lock.json', 'frontend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-node-

      - name: Configure MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Initialize MSVC environment and install dependencies
        run: |
          # === 关键：设置 DISTUTILS_USE_SDK 环境变量 ===
          # 这告诉 distutils 使用已安装的 MSVC 而不需要 vcvarsall
          $env:DISTUTILS_USE_SDK = "1"
          $env:PY_VCRUNTIME_REDIST = "no"

          # 查找 vcvarsall.bat 并设置 INCLUDE 和 LIB 环境变量
          Write-Host "=== MSVC 环境初始化 ===" -ForegroundColor Cyan

          $vcPaths = @(
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars64.bat",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat",
            "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          )

          $vcInstallDir = $null
          foreach ($path in $vcPaths) {
            if (Test-Path $path) {
              Write-Host "找到 vcvarsall.bat: $path" -ForegroundColor Green
              $vcInstallDir = Split-Path -Path $path -Parent
              break
            }
          }

          if ($vcInstallDir) {
            # 手动设置 INCLUDE 环境变量（用于编译）
            $includePaths = @(
              "$vcInstallDir\ATLMFC\include",
              "$vcInstallDir\include",
              "C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt",
              "C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\shared",
              "C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um",
              "C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um"
            )

            # 手动设置 LIB 环境变量（用于链接）
            $libPaths = @(
              "$vcInstallDir\ATLMFC\lib\x64",
              "$vcInstallDir\lib\x64",
              "C:\Program Files (x86)\Windows Kits\10\lib\10.0.22621.0\ucrt\x64",
              "C:\Program Files (x86)\Windows Kits\10\lib\10.0.22621.0\um\x64"
            )

            # 组合路径
            $env:INCLUDE = $includePaths -join ";"
            $env:LIB = $libPaths -join ";"
            $env:LIBPATH = "$vcInstallDir\lib\x64;$vcInstallDir\ATLMFC\lib\x64"

            Write-Host "✓ MSVC 环境变量已设置" -ForegroundColor Green
            Write-Host "INCLUDE 路径数量: $(($env:INCLUDE -split ';').Count)" -ForegroundColor Gray
            Write-Host "LIB 路径数量: $(($env:LIB -split ';').Count)" -ForegroundColor Gray
          } else {
            Write-Host "警告: 未找到 vcvarsall.bat，尝试使用系统默认设置" -ForegroundColor Yellow
          }

          # === 安装 Python 依赖 ===
          Write-Host "`n=== 安装 Python 依赖 ===" -ForegroundColor Cyan
          python -m pip install --upgrade pip setuptools wheel

          # 安装项目依赖
          if (Test-Path "requirements.txt") {
            pip install -r requirements.txt
          }

          # 安装 PyInstaller 和开发依赖
          pip install pyinstaller pytest

          # ⚠️ 关键：将 pybind11 和项目安装合并为单个命令
          # 避免子进程找不到 pybind11 的问题
          pip install pybind11 -e .

          Write-Host "=== 依赖安装完成 ===" -ForegroundColor Green

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          # 安装 npm 依赖
          npm ci

          # 注意：此项目使用 Electron，无需前端构建步骤
          # 前端文件将直接包含在 PyInstaller 构建中

      - name: Verify C++ extension compilation
        run: |
          python -c "import profile_cpp; print('C++ extension loaded successfully')"
          python -c "import toolbox.core.api; print('Backend modules loaded successfully')"

      - name: Run backend tests
        run: |
          python -m pytest toolbox/ -v --tb=short || echo "Tests completed with status: $?"

      - name: Build executable with PyInstaller
        run: |
          # 清理之前的构建产物
          if (Test-Path "dist") { Remove-Item -Recurse -Force dist }
          if (Test-Path "build") { Remove-Item -Recurse -Force build }

          # 使用 PyInstaller 构建
          pyinstaller main.spec --clean --noconfirm

      - name: Verify executable build
        run: |
          # 检查 dist 目录是否存在
          if (-not (Test-Path "dist")) {
            Write-Error "dist directory not found after PyInstaller build"
            exit 1
          }

          # 检查主可执行文件
          $exePath = "dist\main\main.exe"
          if (-not (Test-Path $exePath)) {
            Write-Error "Executable not found at $exePath"
            exit 1
          }

          # 获取可执行文件大小
          $exeSize = (Get-Item $exePath).Length / 1MB
          Write-Host "Executable size: $([math]::Round($exeSize, 2)) MB"

          if ($exeSize -lt 1) {
            Write-Error "Executable seems too small ($exeSize MB), possible build failure"
            exit 1
          }

          Write-Host "Executable built successfully: $exePath"

      - name: Scan executable with security tools
        run: |
          # 安装并运行安全扫描工具
          pip install bandit

          # 代码安全扫描
          bandit -r toolbox/ -f json -o bandit-report.json || true

          Write-Host "Security scan completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe-${{ matrix.python-version }}
          path: |
            dist/
            *.log
            bandit-report.json
          retention-days: 30

      - name: Generate build summary
        if: always()
        run: |
          $summary = @"
          ## 构建摘要 - Python ${{ matrix.python-version }}

          ### 构建结果
          - **状态**: ${{ job.status }}
          - **操作系统**: ${{ runner.os }}
          - **Python 版本**: ${{ matrix.python-version }}
          - **Node.js 版本**: ${{ env.NODE_VERSION }}

          ### 构建详情
          - **构建时间**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          - **提交 SHA**: ${{ github.sha }}
          - **分支**: ${{ github.ref_name }}

          ### 验证检查
          - ✅ Python 环境设置
          - ✅ Node.js 环境设置
          - ✅ 依赖安装
          - ✅ C++ 扩展编译
          - ✅ 前端构建
          - ✅ PyInstaller 打包
          - ✅ 可执行文件验证
          - ✅ 安全扫描

          ### 构建产物
          - `dist/main/main.exe`: 主可执行文件
          - `dist/`: 完整应用程序目录
          - `bandit-report.json`: 安全扫描报告

          ---
          *构建工作流: ${{ github.workflow }}*
          *GitHub Actions*
          "@

          # 将摘要写入文件
          $summary | Out-File -FilePath "build-summary.md" -Encoding UTF8

          Write-Host $summary

      - name: Upload build summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-summary-${{ matrix.python-version }}
          path: build-summary.md

  release:
    name: Create Release
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup MSVC environment and build
        run: |
          # === 关键：设置 DISTUTILS_USE_SDK 环境变量 ===
          # 这告诉 distutils 使用已安装的 MSVC 而不需要 vcvarsall
          $env:DISTUTILS_USE_SDK = "1"
          $env:PY_VCRUNTIME_REDIST = "no"

          # 查找 vcvarsall.bat 并设置 INCLUDE 和 LIB 环境变量
          Write-Host "=== MSVC 环境初始化 ===" -ForegroundColor Cyan

          $vcPaths = @(
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars64.bat",
            "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat",
            "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          )

          $vcInstallDir = $null
          foreach ($path in $vcPaths) {
            if (Test-Path $path) {
              Write-Host "找到 vcvarsall.bat: $path" -ForegroundColor Green
              $vcInstallDir = Split-Path -Path $path -Parent
              break
            }
          }

          if ($vcInstallDir) {
            # 手动设置 INCLUDE 环境变量（用于编译）
            $includePaths = @(
              "$vcInstallDir\ATLMFC\include",
              "$vcInstallDir\include",
              "C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt",
              "C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\shared",
              "C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um",
              "C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um"
            )

            # 手动设置 LIB 环境变量（用于链接）
            $libPaths = @(
              "$vcInstallDir\ATLMFC\lib\x64",
              "$vcInstallDir\lib\x64",
              "C:\Program Files (x86)\Windows Kits\10\lib\10.0.22621.0\ucrt\x64",
              "C:\Program Files (x86)\Windows Kits\10\lib\10.0.22621.0\um\x64"
            )

            # 组合路径
            $env:INCLUDE = $includePaths -join ";"
            $env:LIB = $libPaths -join ";"
            $env:LIBPATH = "$vcInstallDir\lib\x64;$vcInstallDir\ATLMFC\lib\x64"

            Write-Host "✓ MSVC 环境变量已设置" -ForegroundColor Green
          } else {
            Write-Host "警告: 未找到 vcvarsall.bat，尝试使用系统默认设置" -ForegroundColor Yellow
          }

          # === 构建发布版本 ===
          Write-Host "`n=== 构建发布版本 ===" -ForegroundColor Cyan
          # 安装依赖
          python -m pip install --upgrade pip
          pip install pyinstaller

          # 清理之前的构建
          if (Test-Path "dist") { Remove-Item -Recurse -Force dist }
          if (Test-Path "build") { Remove-Item -Recurse -Force build }

          # ⚠️ 关键：将 pybind11 和项目安装合并为单个命令
          # 避免子进程找不到 pybind11 的问题
          pip install pybind11 -e .

          pyinstaller main.spec --clean --noconfirm

      - name: Create distribution archive
        run: |
          # 创建发布包
          $version = "v1.0.0"
          if ($env:GITHUB_REF -match 'refs/tags/(.+)') {
            $version = $matches[1]
          }

          # 压缩为 ZIP 文件
          Compress-Archive -Path "dist\*" -DestinationPath "Wuthering-Waves-Toolbox-$version-Windows.zip" -Force

          # 计算 SHA256
          $hash = Get-FileHash "Wuthering-Waves-Toolbox-$version-Windows.zip" -Algorithm SHA256
          $hash.Hash | Out-File -FilePath "Wuthering-Waves-Toolbox-$version-Windows.zip.sha256" -Encoding UTF8

          Write-Host "Archive created: Wuthering-Waves-Toolbox-$version-Windows.zip"
          Write-Host "SHA256: $($hash.Hash)"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Wuthering Waves Toolbox - ${{ github.ref_name }}"
          body: |
            ## Wuthering Waves Toolbox - Windows Build

            ### 构建信息
            - **版本**: ${{ github.ref_name }}
            - **构建时间**: ${{ steps.date.outputs.date }}
            - **GitHub SHA**: `${{ github.sha }}`

            ### 版本特性
            - 🏗️ 基于 Python ${{ env.PYTHON_VERSION }} 构建
            - ⚡ PyInstaller 单文件打包
            - 🔧 包含所有必要的运行时依赖
            - 🛡️ 通过安全扫描

            ### 系统要求
            - Windows 10/11 (64位)
            - 无需预装 Python 环境
            - 管理员权限（用于游戏窗口捕获）

            ### 使用说明
            1. 下载并解压 ZIP 文件
            2. 以管理员身份运行 `main.exe`
            3. 确保游戏以窗口模式运行
            4. 开始使用自动化功能

            ### 构建产物
            - `main.exe`: 主可执行文件
            - 完整应用程序目录结构

            ---
            *此版本由 GitHub Actions 自动构建*
          files: |
            Wuthering-Waves-Toolbox-*-Windows.zip
            Wuthering-Waves-Toolbox-*-Windows.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Wuthering-Waves-Toolbox-*-Windows.zip
          asset_name: Wuthering-Waves-Toolbox-Windows.zip
          asset_content_type: application/zip

  cleanup:
    name: Cleanup Build Resources
    needs: [build, release]
    runs-on: windows-latest
    if: always()

    steps:
      - name: Cleanup workflow runs
        run: |
          Write-Host "Build workflow completed"
          Write-Host "Build job status: ${{ needs.build.result }}"
          Write-Host "Release job status: ${{ needs.release.result }}"

          # 清理本地缓存（如果需要）
          if (Test-Path "dist") { Remove-Item -Recurse -Force dist }
          if (Test-Path "build") { Remove-Item -Recurse -Force build }
          if (Test-Path "__pycache__") { Remove-Item -Recurse -Force __pycache__ }
          if (Test-Path "*.egg-info") { Remove-Item -Recurse -Force *.egg-info }

          Write-Host "Cleanup completed"

