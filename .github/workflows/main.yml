name: Windows Build Pipeline

# 触发条件配置
on:
  # 推送到主分支和开发分支时触发
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '**.txt'
  # 创建Pull Request时触发
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  # 手动触发
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - python-only
          - frontend-only
      debug:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

# 全局环境变量
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  CACHE_VERSION: v1

# 作业定义
jobs:
  # =============================================================================
  # 代码检出作业 - 所有后续作业的依赖
  # =============================================================================
  checkout:
    name: Checkout Repository
    runs-on: windows-latest
    timeout-minutes: 5

    outputs:
      commit-sha: ${{ steps.commit.outputs.sha }}
      branch-name: ${{ steps.branch.outputs.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit SHA
        id: commit
        run: |
          $sha = (git rev-parse HEAD).Substring(0, 7)
          echo "sha=$sha" >> $env:GITHUB_OUTPUT

      - name: Get branch name
        id: branch
        run: |
          $branch = $env:GITHUB_REF_NAME
          echo "name=$branch" >> $env:GITHUB_OUTPUT

      - name: Display repository information
        run: |
          Write-Host "=== Repository Information ==="
          Write-Host "Repository: $env:GITHUB_REPOSITORY"
          Write-Host "Commit SHA: ${{ steps.commit.outputs.sha }}"
          Write-Host "Branch: ${{ steps.branch.outputs.name }}"
          Write-Host "Trigger: $env:GITHUB_EVENT_NAME"
          Write-Host "==========================="

  # =============================================================================
  # Python环境准备作业
  # =============================================================================
  setup-python:
    name: Setup Python Environment
    runs-on: windows-latest
    timeout-minutes: 10
    needs: checkout

    outputs:
      python-version: ${{ steps.python-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: python-version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Upgrade pip, setuptools, and wheel
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Verify Python installation
        run: |
          Write-Host "=== Python Verification ==="
          python --version
          pip --version
          Write-Host "==========================="

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\pip\Cache
            ~\AppData\Local\Temp\pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-pip-

  # =============================================================================
  # Node.js环境准备作业
  # =============================================================================
  setup-node:
    name: Setup Node.js Environment
    runs-on: windows-latest
    timeout-minutes: 10
    needs: checkout

    outputs:
      node-version: ${{ steps.node-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        id: node-version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Verify Node.js installation
        run: |
          Write-Host "=== Node.js Verification ==="
          node --version
          npm --version
          Write-Host "==========================="

      - name: Cache npm dependencies
        if: hashFiles('frontend/package-lock.json') != ''
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-

  # =============================================================================
  # Visual Studio Build Tools配置作业
  # =============================================================================
  setup-build-tools:
    name: Setup Build Tools
    runs-on: windows-latest
    timeout-minutes: 15
    needs: checkout

    outputs:
      msbuild-version: ${{ steps.msbuild-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v2

      - name: Verify Visual Studio Build Tools installation
        id: msbuild-version
        run: |
          try {
            $msbuild = & msbuild -version -nologo 2>&1 | Select-Object -First 1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "MSBuild: $msbuild"
              echo "version=$msbuild" >> $env:GITHUB_OUTPUT
              Write-Host "Visual Studio Build Tools installed successfully."
            } else {
              Write-Error "Failed to verify MSBuild installation"
              exit 1
            }
          }
          catch {
            Write-Error "Error verifying MSBuild: $_"
            exit 1
          }

      - name: Display build tools information
        run: |
          Write-Host "=== Build Tools Information ==="
          cl.exe
          if ($LASTEXITCODE -eq 0) {
            Write-Host "C++ compiler is available"
          } else {
            Write-Host "C++ compiler not found (may need restart)"
          }
          Write-Host "==============================="

  # =============================================================================
  # Python包构建作业
  # =============================================================================
  build-python:
    name: Build Python Package
    runs-on: windows-latest
    timeout-minutes: 20
    needs: [setup-python, setup-build-tools]

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v2

      - name: Upgrade pip, setuptools, and wheel
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install pybind11
        run: |
          pip install pybind11

      - name: Build C++ extension (Debug)
        if: github.event.inputs.debug == 'true'
        run: |
          python setup.py build_ext --inplace --debug
        continue-on-error: true

      - name: Build C++ extension
        run: |
          python setup.py build_ext --inplace

      - name: Install package in development mode
        run: |
          python -m pip install -e . --verbose

      - name: Verify C++ extension
        run: |
          python -c "import profile_cpp; print('C++ extension imported successfully')"
          python -c "import profile_cpp; print('Module info:', profile_cpp.__file__)"

      - name: Run Python tests (if available)
        run: |
          if (Test-Path "tests\") {
            Write-Host "Running tests from tests\ directory..."
            python -m pytest tests/ -v --tb=short
          } elseif (Test-Path "test\") {
            Write-Host "Running tests from test\ directory..."
            python -m pytest test/ -v --tb=short
          } else {
            Write-Host "No tests directory found. Skipping tests."
          }
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-test-results-${{ matrix.python-version }}
          path: |
            test-results/
            pytest.xml
          retention-days: 7
        continue-on-error: true

      - name: Build Python wheel
        run: |
          python setup.py bdist_wheel

      - name: Upload Python wheel artifacts
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ matrix.python-version }}
          path: dist\*.whl
          retention-days: 30

  # =============================================================================
  # 前端构建作业
  # =============================================================================
  build-frontend:
    name: Build Frontend
    runs-on: windows-latest
    timeout-minutes: 30
    needs: setup-node

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          if (Test-Path "package-lock.json") {
            Write-Host "Using npm ci for faster installation..."
            npm ci
          } else {
            Write-Host "Using npm install..."
            npm install
          }

      - name: Verify dependencies
        working-directory: ./frontend
        run: |
          Write-Host "Installed dependencies:"
          npm list --depth=0

      - name: Run lint checks
        working-directory: ./frontend
        run: |
          if (Test-Path "package.json") {
            $package = Get-Content "package.json" | ConvertFrom-Json
            if ($package.scripts -and $package.scripts.lint) {
              Write-Host "Running lint checks..."
              npm run lint
            } else {
              Write-Host "No lint script found in package.json"
            }
          }
        continue-on-error: true

      - name: Build Electron application
        working-directory: ./frontend
        run: |
          Write-Host "Building Electron application for Windows..."
          npx electron-builder --win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Electron Builder配置可能需要的环境变量
          ELECTRON_CACHE: ~/.electron

      - name: Build application with custom flags
        working-directory: ./frontend
        run: |
          if (Test-Path "package.json") {
            $package = Get-Content "package.json" | ConvertFrom-Json
            if ($package.scripts -and $package.scripts."build:win") {
              Write-Host "Running custom Windows build script..."
              npm run build:win
            }
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Verify build output
        run: |
          if (Test-Path "frontend\dist") {
            Write-Host "Build artifacts found:"
            Get-ChildItem -Path "frontend\dist" -Recurse | ForEach-Object { Write-Host $_.FullName }
          } else {
            Write-Host "No dist directory found"
          }

      - name: Upload frontend build artifacts
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-artifacts
          path: |
            frontend\dist\**
            frontend\build\**
          retention-days: 30

  # =============================================================================
  # 代码质量检查作业
  # =============================================================================
  code-quality:
    name: Code Quality Checks
    runs-on: windows-latest
    timeout-minutes: 15
    needs: setup-python

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting and formatting tools
        run: |
          pip install flake8 black isort mypy bandit safety

      - name: Run flake8 linting
        run: |
          Write-Host "=== Running flake8 linting ==="
          # 严格检查 - 任何错误都会失败
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exit-zero
          # 警告检查 - 不会失败
          flake8 . --count --exit-zero --max-complexity=12 --max-line-length=88 --statistics
        continue-on-error: true

      - name: Check code formatting with black
        run: |
          Write-Host "=== Checking code formatting with black ==="
          black --check --diff .
        continue-on-error: true

      - name: Check import sorting with isort
        run: |
          Write-Host "=== Checking import sorting with isort ==="
          isort --check-only --diff .
        continue-on-error: true

      - name: Run mypy type checking
        run: |
          Write-Host "=== Running mypy type checking ==="
          mypy . --ignore-missing-imports --no-strict-optional --show-error-codes
        continue-on-error: true

      - name: Run bandit security check
        run: |
          Write-Host "=== Running bandit security check ==="
          bandit -r . -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Check dependencies for vulnerabilities
        run: |
          Write-Host "=== Checking dependencies for vulnerabilities ==="
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Upload code quality reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 7

  # =============================================================================
  # 集成测试作业
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: windows-latest
    timeout-minutes: 30
    needs: [build-python, build-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install package
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .

      - name: Download Python wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-wheels-3.11
          path: dist/

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-artifacts
          path: frontend/dist/

      - name: Run integration tests
        run: |
          Write-Host "=== Running Integration Tests ==="
          # 如果有集成测试脚本，运行它
          if (Test-Path "integration-tests.ps1") {
            .\integration-tests.ps1
          } elseif (Test-Path "integration_tests.py") {
            python integration_tests.py
          } else {
            Write-Host "No integration tests found"
          }
        continue-on-error: true

  # =============================================================================
  # 最终验证和汇总作业
  # =============================================================================
  verification:
    name: Build Verification
    runs-on: windows-latest
    timeout-minutes: 10
    needs: [build-python, build-frontend, code-quality, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/

      - name: Display build summary
        run: |
          Write-Host "=== Build Summary ==="
          Write-Host "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host "Commit: ${{ needs.checkout.outputs.commit-sha }}"
          Write-Host "Branch: ${{ needs.checkout.outputs.branch-name }}"
          Write-Host "Trigger: $env:GITHUB_EVENT_NAME"
          Write-Host "==================="

      - name: List all artifacts
        run: |
          Write-Host "=== Build Artifacts ==="
          if (Test-Path "all-artifacts\") {
            Get-ChildItem -Path "all-artifacts\" -Recurse -File | ForEach-Object {
              $relative = $_.FullName.Replace((Get-Location).Path, "").TrimStart('\', '/')
              Write-Host "  $relative ($([math]::Round($_.Length / 1KB, 2)) KB)"
            }
          } else {
            Write-Host "No artifacts found"
          }
          Write-Host "====================="

      - name: Verify critical artifacts
        run: |
          Write-Host "=== Verifying Critical Artifacts ==="
          $errors = @()

          # 检查Python wheel
          if (Get-ChildItem -Path "all-artifacts\*\python-wheels-*" -Recurse -Filter "*.whl" | Measure-Object | Select-Object -ExpandProperty Count) {
            Write-Host "✓ Python wheels found"
          } else {
            $errors += "Python wheels not found"
            Write-Host "✗ Python wheels not found"
          }

          # 检查前端构建
          if (Get-ChildItem -Path "all-artifacts\*\frontend-build-artifacts\*" -Recurse | Measure-Object | Select-Object -ExpandProperty Count) {
            Write-Host "✓ Frontend artifacts found"
          } else {
            $errors += "Frontend artifacts not found"
            Write-Host "✗ Frontend artifacts not found"
          }

          if ($errors.Count -gt 0) {
            Write-Host "`nVerification errors found:"
            $errors | ForEach-Object { Write-Host "  - $_" }
            exit 1
          } else {
            Write-Host "`n✓ All critical artifacts verified successfully"
          }

      - name: Create build manifest
        run: |
          $manifest = @{
            timestamp = (Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')
            commit = "${{ needs.checkout.outputs.commit-sha }}"
            branch = "${{ needs.checkout.outputs.branch-name }}"
            trigger = "$env:GITHUB_EVENT_NAME"
            artifacts = @(
              (Get-ChildItem -Path "all-artifacts\*\*.whl" -Recurse | ForEach-Object {
                @{
                  name = $_.Name
                  path = $_.FullName
                  size = $_.Length
                }
              })
            )
          }
          $manifest | ConvertTo-Json -Depth 10 | Out-File -FilePath "build-manifest.json" -Encoding UTF8

      - name: Upload build manifest
        uses: actions/upload-artifact@v4
        with:
          name: build-manifest
          path: build-manifest.json
          retention-days: 90

  # =============================================================================
  # 发布作业（仅在推送到主分支时触发）
  # =============================================================================
  release:
    name: Create Release
    runs-on: windows-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: [verification]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Create release notes
        run: |
          @"
          # Build Release - ${{ needs.checkout.outputs.commit-sha }}

          ## Build Information
          - **Date**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          - **Commit**: ${{ needs.checkout.outputs.commit-sha }}
          - **Branch**: ${{ needs.checkout.outputs.branch-name }}
          - **Trigger**: $env:GITHUB_EVENT_NAME

          ## Artifacts
          This release includes the following build artifacts:
          "@ | Out-File -FilePath "RELEASE_NOTES.md" -Encoding UTF8

          Get-ChildItem -Path "release-artifacts\*" -Recurse -File | ForEach-Object {
            "  - " + $_.Name + " ($([math]::Round($_.Length / 1KB, 2)) KB)" | Out-File -FilePath "RELEASE_NOTES.md" -Append -Encoding UTF8
          }

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE_NOTES.md
          files: |
            release-artifacts/**/*.exe
            release-artifacts/**/*.whl
            release-artifacts/**/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # 清理作业
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: windows-latest
    if: always()
    needs: [verification, release]

    steps:
      - name: Clean up artifacts
        run: |
          Write-Host "Build pipeline completed."
          Write-Host "Status:"
          Write-Host "  - Checkout: ${{ job.status }}"
          Write-Host "  - Python Build: ${{ needs.build-python.result }}"
          Write-Host "  - Frontend Build: ${{ needs.build-frontend.result }}"
          Write-Host "  - Code Quality: ${{ needs.code-quality.result }}"
          Write-Host "  - Integration Tests: ${{ needs.integration-tests.result }}"
          Write-Host "  - Verification: ${{ needs.verification.result }}"
          if ("${{ github.ref }}" -eq "refs/heads/main" -or "${{ github.ref }}" -eq "refs/heads/develop") {
            Write-Host "  - Release: ${{ needs.release.result }}"
          }
